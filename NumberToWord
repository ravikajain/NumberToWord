class NumberToWord
	def self.get_combination(numText)
		return [] if numText.nil? || numText.length!=10 || numText.split('').select{|a| (a.to_i == 0 || a.to_i == 1)}.length > 0 
		letter_map = {"2"=>["a","b","c"], "3"=>["d","e","f"], "4"=>["g","h","i"], "5" => ["j", "k", "l"], "6" => ["m", "n", "o"], "7" => ["p", "q", "r", "s"], "8" => ["t", "u", "v"], "9" => ["w", "x", "y", "z"]}
		dictionary = {}
		for i in (1..11)
			dictionary[i] = []
		end
		file_path = "dictionary.txt"
		File.foreach(file_path) do |word|
			next if word.length >11
			dictionary[word.length] << word.chop.to_s.downcase
		end
		keys = numText.chars.map{|digit|letter_map[digit]}
		results={}
		total_number = keys.length-1
		for i in (2..total_number )
			first_array = keys[0..i]
			second_array = keys[i + 1..total_number]
			next if first_array.length < 3 || second_array.length < 3			
			first_combination = first_array.shift.product(*first_array).map(&:join)
			next if first_combination.nil?
			second_combination = second_array.shift.product(*second_array).map(&:join)
			next if second_combination.nil?
			results[i] =[(first_combination & dictionary[i+2]),(second_combination & dictionary[total_number-i+1])]
			
		end
		final_word =[]
		results.each do |key, combinations|
			next if combinations.first.nil? || combinations.last.nil?
			
			combinations.first.product(combinations.last).each do |combo_words|
				final_word<<combo_words
			end
		end
		
		p (keys.shift.product(*keys).map(&:join) & dictionary[11])
		final_word << (keys.shift.product(*keys).map(&:join) & dictionary[11]).join(", ")
		final_word
	end
	def self.get_comb(str, letter_map)
	end
end
print NumberToWord.get_combination('6686787825')
